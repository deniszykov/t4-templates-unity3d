<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="UnityEngine" #>
<#@ import namespace="UnityEditor" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
<#
	const string pathToResources = "Assets/Resources/";

	var assets = (
		from assetPath in AssetDatabase.GetAllAssetPaths()
		where assetPath.StartsWith(pathToResources)
		select new { asset = AssetDatabase.LoadMainAssetAtPath(assetPath), path = assetPath, name = Path.GetFileNameWithoutExtension(assetPath) }
	).ToList();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System.Linq;
using UnityEngine;

namespace Assets.Editor.GameDevWare.TextTranform.Examples
{
	public sealed class MultipleResourceRequests
	{
		private ResourceRequest[] loadRequests;

<#
	foreach(var assetInfo in assets)
	{
#>
		public <#= assetInfo.asset.GetType().Name #> <#= this.MakeValidPropertyName(assetInfo.name) #> { get; private set; }
<#
	}
#>

		public float Progress { get { return this.loadRequests.Average(r => r.progress); } }
		public bool IsDone { get { return this.loadRequests.All(r => r.isDone); } }

		public MultipleResourceRequests()
		{
			this.loadRequests = new ResourceRequest[<#= assets.Count #>];
<#
	foreach(var assetInfo in assets)
	{
#>
			this.loadRequests[<#= assets.IndexOf(assetInfo) #>] = Resources.LoadAsync("<#= assetInfo.path.Substring(pathToResources.Length) #>", typeof(<#= assetInfo.asset.GetType().Name #>));
<#
	}
#>
		}
	}
}
<#+ 
	private string MakeValidPropertyName(string name)
	{
		var sb = new System.Text.StringBuilder(name);

		if(char.IsDigit(sb[0]))
			sb.Insert(0, '_');

		for(var i = 1; i < sb.Length; i++)
		{
			
			switch (char.GetUnicodeCategory(sb[i]))
			{
				case UnicodeCategory.DecimalDigitNumber:
					case UnicodeCategory.LowercaseLetter:
					case UnicodeCategory.UppercaseLetter:
					break;
				default:
					sb[i] = '_';
					break;
			}
		}

		return sb.ToString();
	}
#>
