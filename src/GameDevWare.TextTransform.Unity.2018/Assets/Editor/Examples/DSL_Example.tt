<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ output extension=".cs" #>
<# 
	var events = ParseEvents(System.IO.File.ReadAllText(this.Host.ResolvePath("./DSL_Example.dsl"), System.Text.Encoding.UTF8));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System;

namespace Assets.Editor.GameDevWare.TextTranform.Examples
{
<# 
foreach(var @event in events) 
{ 
#>
	<#= string.IsNullOrEmpty(@event.Description) ? "" : "/// <summary>" + SecurityElement.Escape(@event.Description.Replace("\n", ""))+ "</summary>" #>
	public sealed partial class <#= @event.Name #> : IEquatable<<#= @event.Name #>>
	{
<# 
	foreach(var field in @event.Fields) 
	{ 
#>		public <#= field.Type #> <#= field.Name #> { get; set; }
<#
	}
#>

		public <#= @event.Name #>()
		{

		}
		public <#= @event.Name #>(<#= string.Join(", ", @event.Fields.Select(f => f.Type + " " + f.Name.ToLowerInvariant()).ToArray()) #>)
		{
<# 
	foreach(var field in @event.Fields) 
	{ 
#>			this.<#= field.Name #> = <#= field.Name.ToLowerInvariant() #>;
<#
	}
#>
		}

		public override int GetHashCode()
		{
			return unchecked
			(
<# 
	foreach(var field in @event.Fields) 
	{ 
#>				(this.<#= field.Name #> == default(<#= field.Type #>) ? 0 : this.<#= field.Name #>.GetHashCode()) <#= @event.Fields.Last() == field ? "" : "+" #>
<#
	}
#>
			);
		}
		public override bool Equals(object value)
		{
			return this.Equals(value as <#= @event.Name #>);
		}
		public bool Equals(<#= @event.Name #> other)
		{
			if (other == null)
				return false;
			else if (ReferenceEquals(this, other))
				return true;

			return 
			(
<# 
	foreach(var field in @event.Fields) 
	{ 
#>				object.Equals(this.<#= field.Name #>, other.<#= field.Name #>)  <#= @event.Fields.Last() == field ? "" : "&&" #>
<#
	}
#>			);
		}

		public override string ToString()
		{
			return
			(
				"<#= @event.Name #>, " +
<# 
	foreach(var field in @event.Fields) 
	{ 
		var fieldValue = "this." + field.Name;
		if(field.Type.EndsWith("[]"))
			fieldValue = "(this." + field.Name + " != null ? string.Join(\", \", Array.ConvertAll(this." + field.Name + ", v => Convert.ToString(v))) : \"<null>\")";
#>				"<#= field.Name #>: " + <#= fieldValue #> <#= @event.Fields.Last() == field ? "" : "+ \", \" + " #>
<#
	}
#>
			);
		}
	}

<#
}
#>
}

<#+ 
private List<EventDefinition> ParseEvents(string eventDefinitions)
{
	var events = new List<EventDefinition>();
	var lines = Array.ConvertAll(eventDefinitions.Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries), l => l.Trim());
	var description = "";
	
	foreach(var line in lines)
	{
		if (line.StartsWith("//"))
		{
			description = line.Substring(2).Trim();
			continue;
		}
		else if (line.StartsWith("event"))
		{
			var fieldsStart = line.IndexOf('(');
			var fieldsEnd = line.IndexOf(')');
			var fieldDefs = line.Substring(fieldsStart + 1, fieldsEnd - fieldsStart - 1).Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
			var name = line.Substring(5, fieldsStart - 5).Trim();
			var fields = new List<EventFieldDefinition>();
			foreach(var fieldDef in fieldDefs)
			{
				var nameAndType = fieldDef.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
				fields.Add(new EventFieldDefinition(nameAndType[1], nameAndType[0]));
			}
			if(name.EndsWith("Event", StringComparison.OrdinalIgnoreCase) == false)
				name += "Event";

			events.Add(new EventDefinition(name, description, fields));
			description = null;
		}
		else if(line.StartsWith("include"))
		{
			var fileName = line.Substring("include".Length + 1);
			var subEventDefinitions = System.IO.File.ReadAllText(this.Host.ResolvePath(fileName), System.Text.Encoding.UTF8);
			var subEvents = ParseEvents(subEventDefinitions);
			events.AddRange(subEvents);
		}
	}

	return events;
}

private class EventDefinition
{
	public readonly string Name;
	public readonly string Description;
	public ReadOnlyCollection<EventFieldDefinition> Fields;

	public EventDefinition(string name, string description, List<EventFieldDefinition> fields)
	{
		this.Name = name;
		this.Description = description;
		this.Fields = new ReadOnlyCollection<EventFieldDefinition>(fields);
	}
}
private class EventFieldDefinition
{
	public readonly string Name;
	public readonly string Type;

	public EventFieldDefinition(string name, string type) 
	{
		this.Name = name;
		this.Type = type;
	}
}
#>